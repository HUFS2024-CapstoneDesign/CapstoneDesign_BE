plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.diffplug.spotless' version '6.23.3' // spotless
    id 'com.google.cloud.tools.jib' version '3.4.1' // jib
    id 'jacoco'
    id 'org.sonarqube' version '4.2.1.3168' // sonarcloud
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

spotless {
    java {
        // Google Java 포맷 적용
        googleJavaFormat()
        // 아래 순서로 import문 정렬
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 각 라인 끝에 있는 공백을 제거
        trimTrailingWhitespace()
        // 파일 끝에 새로운 라인 추가
        endWithNewline()
    }
}

jib {
    from {
        image = "openjdk:17-alpine"
    }
    to {
        image = "ksw990327/api"
        tags = ["latest"]
        auth {
            username = 'ksw990327'
            password = System.getenv('DOCKERHUB_PASSWORD') ?: ''
        }
    }
    container {
        jvmFlags = ["-Xms128m", "-Xmx128m", "-Dspring.profiles.active=dev", "-Dfile.encoding=UTF-8"]
        ports = ["8080"]
        allowInsecureRegistries = true
    }
}

def jacocoDir = layout.buildDirectory.dir("reports/")

sonar {
    properties {
        property "sonar.projectKey", "hufs2024-capstonedesign"
        property "sonar.organization", "CapstoneDesign_BE"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.sources', 'src'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.test.exclusions', jacocoExcludePatterns.join(',')
        property 'sonar.test.inclusions', '**/*Test.java'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', jacocoDir.get().file("jacoco/index.xml").asFile
    }
}

jacoco {
    toolVersion = "0.8.12"
}


def jacocoExcludePatterns = [
        // 측정 안하고 싶은 패턴
        "**/*Application*",
        "**/test/**",
        "**/resources/**",
        "**/domain/**"
]

jacocoTestCoverageVerification {

    violationRules {
        rule {
            // rule 활성화
            enabled = true

            // 클래스 단위로 룰 체크
            element = 'CLASS'

            // 라인 커버리지를 최소 80% 만족
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.30
            }

            // 브랜치 커버리지를 최소 80% 만족
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.30
            }
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // H2
    runtimeOnly 'com.h2database:h2'

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    //swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // oAuth
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // spring email
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // json
    implementation 'org.json:json:20210307'

    // AOP Time
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('compileJava') {
    dependsOn 'spotlessApply'
    dependsOn 'addGitHooks'
}

tasks.register('addGitHooks', Copy) {
    from './script/pre-commit'
    into './.git/hooks'
    filePermissions {
        unix('r-xr-xr-x')
    }
}


tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}


jacocoTestReport {
    dependsOn test    // 테스트가 수행되어야만 report를 생성할 수 있도록 설정
    reports {
        html.required.set(true)
        xml.required.set(true)
        csv.required.set(true)
        html.outputLocation = jacocoDir.get().file("jacoco/index.html").asFile
        xml.outputLocation = jacocoDir.get().file("jacoco/index.xml").asFile
        csv.outputLocation = jacocoDir.get().file("jacoco/index.csv").asFile
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: jacocoExcludePatterns)
                })
        )
    }
    finalizedBy jacocoTestCoverageVerification
}